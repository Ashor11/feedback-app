trigger:
  branches:
    include:
      - main
pool:
  name: Default

variables:
  - group: docker_vars
  - name: imageName
    value: feedback-app
  - name: imageTag
    value: $(Build.BuildId)
  
parameters:
  - name: environment
    displayName: environment
    type: string
    default: dev
    values:
      - dev
stages:
- stage: CI
  displayName: CI stage
  jobs:  
  - job: backend
    steps:
    - checkout: self
    - script: |
       sudo yum install python3.9 -y
      displayName: 'Install Python 3.9'
    - script: |
        sudo yum install python3-pip -y
        sudo python -m pip install --upgrade pip
        sudo pip install flask pytest flake8
        sudo pip install pytest
      displayName: 'Install Flask and linting tools'
    - script: flake8 src/feedback_backend/app.py
      displayName: Linting Backend
    - script: |
        sudo pip install -r src/feedback_backend/requirements.txt
        python3 -m pytest tests/test_app.py
      displayName: 'Run Backend Tests'
      
  - job: docker
    dependsOn: backend
    displayName: docker build
    steps:
    - checkout: self
    - script: |
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
        sudo yum install -y docker-ce docker-ce-cli containerd.io
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo chmod 666 /var/run/docker.sock
      displayName: 'Install Docker'

    - task: Docker@2
      condition: succeeded()
      displayName: 'Build frontend image'
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: '$(DOCKER_USERNAME)/$(imageName)-frontend'
        command: 'buildAndPush'
        buildContext: '$(System.DefaultWorkingDirectory)'
        Dockerfile: 'src/feedback_frontend/src/Dockerfile'
        tags: |
          $(Build.BuildId)

    - task: Docker@2
      displayName: 'Build backend image'
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: '$(DOCKER_USERNAME)/$(imageName)-backend'
        command: 'buildAndPush'
        Dockerfile: 'src/feedback_backend/Dockerfile'
        buildContext: '$(System.DefaultWorkingDirectory)'
        tags: |
          $(Build.BuildId)
          
- stage: CD
  displayName: CD stage
  jobs:
  - deployment: deployToDev
    displayName: Deploy to ${{ parameters.environment }} EKS
    environment: '${{ parameters.environment }}'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
         # - task: ReplaceTokens@6
          ## inputs:
             # rootDirectory: '$(System.DefaultWorkingDirectory)'        
             # targetFiles: 'k8s/*.yaml'
             # tokenPrefix: '${'
             # tokenSuffix: '}'
             # escapeType: 'json'
             # verbosity: 'detailed'
          - script: |
             sed -i "s|image: {DOCKER_USERNAME}-frontend|image: $(DOCKER_USERNAME)/$(imageName)-frontend:$(Build.BuildId)|g" k8s/frontend-deployment.yaml
             sed -i "s|image: {DOCKER_USERNAME}-backend|image: $(DOCKER_USERNAME)/$(imageName)-backend:$(Build.BuildId)|g" k8s/backend-deployment.yaml
             echo "Updated frontend-deployment.yaml:"
             grep -A 1 "image:" k8s/frontend-deployment.yaml
             echo "Updated backend-deployment.yaml:"
             grep -A 1 "image:" k8s/backend-deployment.yaml
            displayName: 'Update image tags in Kubernetes files'
            workingDirectory: '$(System.DefaultWorkingDirectory)'

          - task: AWSShellScript@1
            displayName: 'Update kubeconfig'
            inputs:
              awsCredentials: 'aws-credentials'
              regionName: 'us-east-1'
              scriptType: 'inline'
              inlineScript: |
                 aws eks update-kubeconfig --name my-eks-cluster --region us-east-1 
          - script: |
              kubectl create namespace ${{ parameters.environment }} --ignore-existing-namespace || true
              kubectl replace -f k8s/ -n ${{ parameters.environment }} --force
            displayName: 'Deploy to EKS'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
